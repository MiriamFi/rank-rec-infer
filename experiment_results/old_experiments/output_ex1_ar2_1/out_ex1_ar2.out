we are running from this directory: /cluster/home/miriamfi/RankRec
The name of the job is: ex1_ar2
The job ID is 343634
The job was run on these nodes: idun-02-01
Number of nodes: 1
We are using 1 cores
We are using 1 cores per node
Total of 1 cores

Currently Loaded Modules:
  1) GCCcore/9.3.0
  2) zlib/1.2.11-GCCcore-9.3.0                     (H)
  3) binutils/2.34-GCCcore-9.3.0                   (H)
  4) iccifort/2020.1.217
  5) numactl/2.0.13-GCCcore-9.3.0                  (H)
  6) UCX/1.8.0-GCCcore-9.3.0                       (H)
  7) impi/2019.7.217-iccifort-2020.1.217
  8) iimpi/2020a
  9) imkl/2020.1.217-iimpi-2020a
 10) intel/2020a
 11) bzip2/1.0.8-GCCcore-9.3.0                     (H)
 12) ncurses/6.2-GCCcore-9.3.0                     (H)
 13) libreadline/8.0-GCCcore-9.3.0                 (H)
 14) Tcl/8.6.10-GCCcore-9.3.0                      (H)
 15) SQLite/3.31.1-GCCcore-9.3.0                   (H)
 16) XZ/5.2.5-GCCcore-9.3.0                        (H)
 17) GMP/6.2.0-GCCcore-9.3.0                       (H)
 18) libffi/3.3-GCCcore-9.3.0                      (H)
 19) Python/3.8.2-GCCcore-9.3.0
 20) pybind11/2.4.3-GCCcore-9.3.0-Python-3.8.2     (H)
 21) SciPy-bundle/2020.03-intel-2020a-Python-3.8.2
 22) libpng/1.6.37-GCCcore-9.3.0                   (H)
 23) freetype/2.10.1-GCCcore-9.3.0                 (H)
 24) expat/2.2.9-GCCcore-9.3.0                     (H)
 25) util-linux/2.35-GCCcore-9.3.0                 (H)
 26) fontconfig/2.13.92-GCCcore-9.3.0              (H)
 27) xorg-macros/1.19.2-GCCcore-9.3.0              (H)
 28) libpciaccess/0.16-GCCcore-9.3.0               (H)
 29) X11/20200222-GCCcore-9.3.0                    (H)
 30) Tk/8.6.10-GCCcore-9.3.0                       (H)
 31) Tkinter/3.8.2-GCCcore-9.3.0                   (H)
 32) matplotlib/3.2.1-intel-2020a-Python-3.8.2

  Where:
   H:  Hidden Module

 

Program starting... 

User Info Loaded!
Loaded user features from user_features/ml_new/feat_g_a_o_r2.csv
User features shape:  (943, 25) 

Matrix Dimensions for  X_train1
X_train1  shape: (39633, 2)
X_train1  unique users: 943
X_train1  unique items: 1440


X_train1  matrix sparsity: 97.1%


Matrix Dimensions for  X_test1
X_test1  shape: (29942, 2)
X_test1  unique users: 943
X_test1  unique items: 1465


X_test1  matrix sparsity: 97.8%


Matrix Dimensions for  X_train2
X_train2  shape: (69575, 2)
X_train2  unique users: 943
X_train2  unique items: 1575


X_train2  matrix sparsity: 95.3%


Matrix Dimensions for  X_test2
X_test2  shape: (30425, 2)
X_test2  unique users: 943
X_test2  unique items: 1574


X_test2  matrix sparsity: 98.0%


X train and test 1
Stats for  users
Train  users : 943
Test  users 943
cold-start  users : set()


Stats for  items
Train  items : 1440
Test  items 1465
cold-start  items : {'1600', '745', '1032', '1002', '1448', '1654', '572', '1660', '830', '1222', '791', '1642', '1617', '1480', '1490', '1662', '1481', '1474', '1517', '775', '1459', '138', '1541', '1509', '1310', '1444', '1325', '1446', '415', '1435', '573', '1285', '388', '1594', '1175', '1416', '438', '1096', '1253', '1486', '817', '1467', '1599', '1532', '1578', '1634', '1611', '1597', '1505', '1657', '1515', '1397', '777', '1454', '1644', '1419', '1422', '1528', '1043', '1610', '726', '1542', '35', '442', '788', '1531', '920', '1522', '852', '1658', '1550', '1104', '1521', '784', '1534', '1250', '1155', '1003', '1144', '1639', '1553', '37', '598', '1596', '858', '439', '1471', '1501', '1223', '1027', '1239', '1231', '1602', '1548', '1402', '668', '765', '1293', '1246', '1230', '1354', '1403', '804', '1609', '1540', '437', '1477', '400', '927', '1595', '1309', '1364', '1374', '1210', '1303', '1156', '1314', '1456', '78', '1598', '1523', '1672', '1412', '1200', '838', '1370', '1638', '1162', '992', '1676', '816', '1626', '1495', '1450', '1443'}


X train and test 2
Stats for  users
Train  users : 943
Test  users 943
cold-start  users : set()


Stats for  items
Train  items : 1575
Test  items 1574
cold-start  items : {'1492', '913', '1186', '1499', '1576', '1130', '1648', '1189', '1571', '1649', '1508', '1584', '1489', '1613', '814', '1661', '1526', '1614', '1637', '1504', '1236', '1577', '1682', '1510', '1671', '1603', '910', '1582', '1581', '1575', '1632', '1593', '1436', '1549', '1678', '1668', '1562', '1579', '1681', '1543', '1460', '1452', '1625', '1476', '1432', '1365', '1627', '1546', '1520', '1106', '1408', '1447', '1586', '1606', '1498', '1664', '600', '1663', '1646', '1493', '1667', '1563', '1525', '1583', '1565', '1650', '1398', '1675', '1497', '957', '1640', '1453', '1570', '1494', '897', '1679', '1674', '1572', '1580', '677', '1588', '1647', '911', '1680', '1677', '1651', '1624', '1590', '1666', '1665', '1569', '1621', '1633', '1616', '1645', '1618', '1235', '1327', '1275', '1659', '1673', '599', '1628', '1669', '626', '1458', '1653'}


Recommender Round 1: 

training epoch: 0
log likelihood: -15273.3798828125

training epoch: 1
log likelihood: -13253.5703125

training epoch: 2
log likelihood: -12762.9501953125

training epoch: 3
log likelihood: -12258.73046875

training epoch: 4
log likelihood: -11466.900390625

training epoch: 5
log likelihood: -10538.16015625

training epoch: 6
log likelihood: -9526.919921875

training epoch: 7
log likelihood: -8956.9501953125

training epoch: 8
log likelihood: -8398.0595703125

training epoch: 9
log likelihood: -8132.0

training epoch: 10
log likelihood: -7709.47998046875

training epoch: 11
log likelihood: -7633.66015625

training epoch: 12
log likelihood: -7347.68017578125

training epoch: 13
log likelihood: -7142.2900390625

training epoch: 14
log likelihood: -6997.6298828125

training epoch: 15
log likelihood: -7004.43994140625

training epoch: 16
log likelihood: -6691.8798828125

training epoch: 17
log likelihood: -6656.330078125

training epoch: 18
log likelihood: -6671.5498046875

training epoch: 19
log likelihood: -6612.47998046875
recommendations_train shape:  (943, 50)
Scores shape:  (29942,)
count    29587.000000
mean         0.775238
std          1.260607
min         -3.778804
25%         -0.118033
50%          0.839896
75%          1.724576
max          4.612268
dtype: float64
precision: 0.086
recall: 0.256
hit rate: 0.898
Recommender Round 2: 

training epoch: 0
log likelihood: -26131.759765625

training epoch: 1
log likelihood: -23245.640625

training epoch: 2
log likelihood: -21890.58984375

training epoch: 3
log likelihood: -19601.830078125

training epoch: 4
log likelihood: -17295.0703125

training epoch: 5
log likelihood: -16513.26953125

training epoch: 6
log likelihood: -15661.08984375

training epoch: 7
log likelihood: -14906.4599609375

training epoch: 8
log likelihood: -14611.3798828125

training epoch: 9
log likelihood: -14183.599609375

training epoch: 10
log likelihood: -13967.2900390625

training epoch: 11
log likelihood: -13702.349609375

training epoch: 12
log likelihood: -13367.419921875

training epoch: 13
log likelihood: -13282.990234375

training epoch: 14
log likelihood: -13162.76953125

training epoch: 15
log likelihood: -12883.75

training epoch: 16
log likelihood: -12915.48046875

training epoch: 17
log likelihood: -12793.1396484375

training epoch: 18
log likelihood: -12882.3798828125

training epoch: 19
log likelihood: -12813.75
recommendations_train shape:  (943, 50)
Scores shape:  (30425,)
count    30264.000000
mean         0.902498
std          1.506571
min         -4.065041
25%         -0.127515
50%          1.007453
75%          2.010552
max          4.938416
dtype: float64
precision: 0.075
recall: 0.222
hit rate: 0.898
Recommendations are not written to file for N higher than 20.
Rec train shape:  (943, 1682)
Rec test shape:  (943, 1682)
atr_classes:  {'M': 0, 'F': 1}
atr_classes:  {'M': 0, 'F': 1}
gender
1886
all_attr:  Counter({0: 670, 1: 273})
all_attr unique:  2
less than 2 samples:  0
2 samples:  0
5 samples or less:  0
train_attr unique:  2
test_attr unique:  2



atr_classes:  {}
atr_classes:  {}
age
1886
all_attr:  Counter({0: 544, 1: 209, 2: 190})
all_attr unique:  3
less than 2 samples:  0
2 samples:  0
5 samples or less:  0
train_attr unique:  3
test_attr unique:  3



atr_classes:  {'technician/engineer': 0, 'lawyer': 1, 'executive': 2, 'student': 3, 'programmer': 4, 'homemaker/retired': 5, 'scientist': 6, 'educator': 7, 'other/none': 8, 'salesman/marketing': 9, 'healthcare/doctor': 10, 'administrator': 11, 'librarian': 12, 'writer': 13, 'artist': 14, 'entertainment': 15}
atr_classes:  {'technician/engineer': 0, 'lawyer': 1, 'executive': 2, 'student': 3, 'programmer': 4, 'homemaker/retired': 5, 'scientist': 6, 'educator': 7, 'other/none': 8, 'salesman/marketing': 9, 'healthcare/doctor': 10, 'administrator': 11, 'librarian': 12, 'writer': 13, 'artist': 14, 'entertainment': 15}
occupation
1886
all_attr:  Counter({3: 196, 8: 114, 7: 95, 0: 94, 11: 79, 4: 66, 12: 51, 13: 45, 9: 38, 2: 32, 6: 31, 14: 28, 10: 23, 5: 21, 15: 18, 1: 12})
all_attr unique:  16
less than 2 samples:  0
2 samples:  0
5 samples or less:  0
train_attr unique:  16
test_attr unique:  16



atr_classes:  {}
atr_classes:  {}
area_2
1886
all_attr:  Counter({1: 608, 0: 298, 2: 37})
all_attr unique:  3
less than 2 samples:  0
2 samples:  0
5 samples or less:  0
train_attr unique:  3
test_attr unique:  3





CV with  dummy  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.714, f1=0.714, auc=0.500, est=0.710, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.688, f1=0.688, auc=0.500, est=0.716, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.693, f1=0.693, auc=0.500, est=0.715, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.734, f1=0.734, auc=0.500, est=0.705, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.723, f1=0.723, auc=0.500, est=0.707, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.711 (0.018) 

F1: 0.711 (0.018) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.614, f1=0.614, auc=0.659, est=0.733, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.603, f1=0.603, auc=0.611, est=0.725, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.640, f1=0.640, auc=0.718, est=0.729, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.585, f1=0.585, auc=0.618, est=0.734, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.681, f1=0.681, auc=0.695, est=0.739, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

Accuracy: 0.625 (0.033) 

F1: 0.625 (0.033) 

AUC: 0.660 (0.042) 



CV with  svc  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.598, f1=0.598, auc=0.588, est=0.737, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.698, f1=0.698, auc=0.605, est=0.724, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.630, f1=0.630, auc=0.682, est=0.729, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.484, f1=0.484, auc=0.503, est=0.724, cfg={'svc__C': 10, 'svc__kernel': 'sigmoid', 'svc__probability': True} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.596, f1=0.596, auc=0.577, est=0.725, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

Accuracy: 0.601 (0.069) 

F1: 0.601 (0.069) 

AUC: 0.591 (0.057) 



CV with  ran_for  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.741, f1=0.741, auc=0.725, est=0.749, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 1500} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.698, f1=0.698, auc=0.702, est=0.755, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 1500} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.693, f1=0.693, auc=0.695, est=0.756, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.739, f1=0.739, auc=0.711, est=0.744, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 500} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.734, f1=0.734, auc=0.784, est=0.740, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 1000} 

Accuracy: 0.721 (0.021) 

F1: 0.721 (0.021) 

AUC: 0.723 (0.032) 



CV with  dummy  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.534, f1=0.534, auc=0.500, est=0.588, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.556, f1=0.556, auc=0.500, est=0.582, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.619, f1=0.619, auc=0.500, est=0.566, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.580, f1=0.580, auc=0.500, est=0.576, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.596, f1=0.596, auc=0.500, est=0.572, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.577 (0.030) 

F1: 0.577 (0.030) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.550, f1=0.550, auc=0.588, est=0.603, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'saga'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.577, f1=0.577, auc=0.557, est=0.611, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'saga'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.556, f1=0.556, auc=0.565, est=0.613, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.596, f1=0.596, auc=0.583, est=0.608, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.484, f1=0.484, auc=0.500, est=0.611, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'saga'} 

Accuracy: 0.552 (0.038) 

F1: 0.552 (0.038) 

AUC: 0.559 (0.031) 



CV with  svc  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.519, f1=0.519, auc=0.534, est=0.601, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.566, f1=0.566, auc=0.555, est=0.606, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.534, f1=0.534, auc=0.602, est=0.590, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.548, f1=0.548, auc=0.522, est=0.604, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.553, f1=0.553, auc=0.489, est=0.596, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

Accuracy: 0.544 (0.016) 

F1: 0.544 (0.016) 

AUC: 0.540 (0.038) 



CV with  ran_for  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.556, f1=0.556, auc=0.628, est=0.617, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 1000} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.561, f1=0.561, auc=0.549, est=0.619, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 250} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.619, f1=0.619, auc=0.531, est=0.613, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 250} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.590, f1=0.590, auc=0.595, est=0.611, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 250} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.590, f1=0.590, auc=0.633, est=0.613, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 250} 

Accuracy: 0.583 (0.023) 

F1: 0.583 (0.023) 

AUC: 0.587 (0.041) 



CV with  dummy  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.217, f1=0.217, auc=0.500, est=0.206, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.180, f1=0.180, auc=0.500, est=0.215, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.206, f1=0.206, auc=0.500, est=0.208, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.229, f1=0.229, auc=0.500, est=0.203, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.207, f1=0.207, auc=0.500, est=0.208, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.208 (0.016) 

F1: 0.208 (0.016) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.206, f1=0.206, auc=0.757, est=0.220, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.196, f1=0.196, auc=0.767, est=0.243, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.206, f1=0.206, auc=0.507, est=0.231, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.181, f1=0.181, auc=0.497, est=0.237, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.202, f1=0.202, auc=0.604, est=0.229, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

Accuracy: 0.198 (0.010) 

F1: 0.198 (0.010) 

AUC: 0.626 (0.117) 



CV with  svc  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.217, f1=0.217, auc=0.575, est=0.215, cfg={'svc__C': 0.001, 'svc__kernel': 'linear', 'svc__probability': True} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.201, f1=0.201, auc=0.572, est=0.236, cfg={'svc__C': 1.0, 'svc__kernel': 'sigmoid', 'svc__probability': True} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.190, f1=0.190, auc=0.878, est=0.218, cfg={'svc__C': 1.0, 'svc__kernel': 'sigmoid', 'svc__probability': True} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.223, f1=0.223, auc=0.519, est=0.238, cfg={'svc__C': 1.0, 'svc__kernel': 'sigmoid', 'svc__probability': True} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.202, f1=0.202, auc=0.683, est=0.227, cfg={'svc__C': 1.0, 'svc__kernel': 'sigmoid', 'svc__probability': True} 

Accuracy: 0.207 (0.012) 

F1: 0.207 (0.012) 

AUC: 0.645 (0.128) 



CV with  ran_for  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.280, f1=0.280, auc=0.588, est=0.251, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 250} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.201, f1=0.201, auc=0.484, est=0.275, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 15, 'ran_for__n_estimators': 100} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.243, f1=0.243, auc=0.353, est=0.269, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 250} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.298, f1=0.298, auc=0.435, est=0.249, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 4, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 250} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.261, f1=0.261, auc=0.450, est=0.264, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 100} 

Accuracy: 0.257 (0.033) 

F1: 0.257 (0.033) 

AUC: 0.462 (0.076) 



CV with  dummy  for  area_2
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.646, f1=0.646, auc=0.500, est=0.645, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.693, f1=0.693, auc=0.500, est=0.633, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.593, f1=0.593, auc=0.500, est=0.658, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.660, f1=0.660, auc=0.500, est=0.641, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.633, f1=0.633, auc=0.500, est=0.648, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.645 (0.033) 

F1: 0.645 (0.033) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  area_2
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.513, f1=0.513, auc=0.489, est=0.672, cfg={'log_reg__C': 0.1, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.492, f1=0.492, auc=0.499, est=0.649, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.524, f1=0.524, auc=0.518, est=0.688, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.532, f1=0.532, auc=0.470, est=0.675, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'saga'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.500, f1=0.500, auc=0.437, est=0.666, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

Accuracy: 0.512 (0.015) 

F1: 0.512 (0.015) 

AUC: 0.483 (0.027) 



CV with  svc  for  area_2
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.582, f1=0.582, auc=0.492, est=0.683, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.603, f1=0.603, auc=0.448, est=0.635, cfg={'svc__C': 100, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.566, f1=0.566, auc=0.502, est=0.680, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.580, f1=0.580, auc=0.523, est=0.681, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.564, f1=0.564, auc=0.485, est=0.657, cfg={'svc__C': 10, 'svc__kernel': 'rbf', 'svc__probability': True} 

Accuracy: 0.579 (0.014) 

F1: 0.579 (0.014) 

AUC: 0.490 (0.025) 



CV with  ran_for  for  area_2
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.656, f1=0.656, auc=0.505, est=0.675, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 250} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.693, f1=0.693, auc=0.473, est=0.647, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 250} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.598, f1=0.598, auc=0.515, est=0.662, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.633, f1=0.633, auc=0.448, est=0.654, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 4, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.628, f1=0.628, auc=0.571, est=0.656, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100} 

Accuracy: 0.642 (0.032) 

F1: 0.642 (0.032) 

AUC: 0.503 (0.042) 

Linux idun-02-01 4.18.0-193.el8.x86_64 #1 SMP Fri May 8 10:59:10 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
