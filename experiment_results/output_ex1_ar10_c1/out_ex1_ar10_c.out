we are running from this directory: /cluster/home/miriamfi/RankRec
The name of the job is: ex1_ar10_c
The job ID is 376012
The job was run on these nodes: idun-02-01
Number of nodes: 1
We are using 1 cores
We are using 1 cores per node
Total of 1 cores

Currently Loaded Modules:
  1) GCCcore/9.3.0
  2) zlib/1.2.11-GCCcore-9.3.0                     (H)
  3) binutils/2.34-GCCcore-9.3.0                   (H)
  4) iccifort/2020.1.217
  5) numactl/2.0.13-GCCcore-9.3.0                  (H)
  6) UCX/1.8.0-GCCcore-9.3.0                       (H)
  7) impi/2019.7.217-iccifort-2020.1.217
  8) iimpi/2020a
  9) imkl/2020.1.217-iimpi-2020a
 10) intel/2020a
 11) bzip2/1.0.8-GCCcore-9.3.0                     (H)
 12) ncurses/6.2-GCCcore-9.3.0                     (H)
 13) libreadline/8.0-GCCcore-9.3.0                 (H)
 14) Tcl/8.6.10-GCCcore-9.3.0                      (H)
 15) SQLite/3.31.1-GCCcore-9.3.0                   (H)
 16) XZ/5.2.5-GCCcore-9.3.0                        (H)
 17) GMP/6.2.0-GCCcore-9.3.0                       (H)
 18) libffi/3.3-GCCcore-9.3.0                      (H)
 19) Python/3.8.2-GCCcore-9.3.0
 20) pybind11/2.4.3-GCCcore-9.3.0-Python-3.8.2     (H)
 21) SciPy-bundle/2020.03-intel-2020a-Python-3.8.2
 22) libpng/1.6.37-GCCcore-9.3.0                   (H)
 23) freetype/2.10.1-GCCcore-9.3.0                 (H)
 24) expat/2.2.9-GCCcore-9.3.0                     (H)
 25) util-linux/2.35-GCCcore-9.3.0                 (H)
 26) fontconfig/2.13.92-GCCcore-9.3.0              (H)
 27) xorg-macros/1.19.2-GCCcore-9.3.0              (H)
 28) libpciaccess/0.16-GCCcore-9.3.0               (H)
 29) X11/20200222-GCCcore-9.3.0                    (H)
 30) Tk/8.6.10-GCCcore-9.3.0                       (H)
 31) Tkinter/3.8.2-GCCcore-9.3.0                   (H)
 32) matplotlib/3.2.1-intel-2020a-Python-3.8.2

  Where:
   H:  Hidden Module

 

Program starting... 

User Info Loaded!
Rec train shape:  (943, 1682)
Rec test shape:  (943, 1682)
atr_classes:  {'M': 0, 'F': 1}
atr_classes:  {'M': 0, 'F': 1}
atr_classes:  {'M': 0, 'F': 1}
gender
atr_classes:  {}
atr_classes:  {}
atr_classes:  {}
age
atr_classes:  {'technician/engineer': 0, 'other/none': 1, 'writer': 2, 'executive': 3, 'administrator': 4, 'student': 5, 'lawyer': 6, 'educator': 7, 'scientist': 8, 'entertainment': 9, 'programmer': 10, 'librarian': 11, 'homemaker/retired': 12, 'artist': 13, 'salesman/marketing': 14, 'healthcare/doctor': 15}
atr_classes:  {'technician/engineer': 0, 'other/none': 1, 'writer': 2, 'executive': 3, 'administrator': 4, 'student': 5, 'lawyer': 6, 'educator': 7, 'scientist': 8, 'entertainment': 9, 'programmer': 10, 'librarian': 11, 'homemaker/retired': 12, 'artist': 13, 'salesman/marketing': 14, 'healthcare/doctor': 15}
atr_classes:  {'technician/engineer': 0, 'other/none': 1, 'writer': 2, 'executive': 3, 'administrator': 4, 'student': 5, 'lawyer': 6, 'educator': 7, 'scientist': 8, 'entertainment': 9, 'programmer': 10, 'librarian': 11, 'homemaker/retired': 12, 'artist': 13, 'salesman/marketing': 14, 'healthcare/doctor': 15}
occupation
atr_classes:  {}
atr_classes:  {}
atr_classes:  {}
area_10
all_attr:  Counter({0: 116, 1: 109, 6: 104, 5: 104, 7: 101, 8: 100, 2: 97, 4: 89, 3: 86, 9: 37})
[8, 0, 4, 6, 2, 5, 7, 3, 1, 9]
all_attr unique:  10


CV with  dummy  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.698, f1=0.698, auc=0.500, est=0.713, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.500, est=0.711, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.500, est=0.711, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.707, f1=0.707, auc=0.500, est=0.711, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.729, f1=0.729, auc=0.500, est=0.706, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.711 (0.010) 

F1: 0.711 (0.010) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.693, f1=0.693, auc=0.533, est=0.710, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'newton-cg'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.714, f1=0.714, auc=0.508, est=0.710, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'newton-cg'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.587, est=0.711, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'newton-cg'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.707, f1=0.707, auc=0.505, est=0.715, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'sag'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.718, f1=0.718, auc=0.477, est=0.706, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'saga'} 

Accuracy: 0.708 (0.009) 

F1: 0.708 (0.009) 

AUC: 0.522 (0.037) 



CV with  svc  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.698, f1=0.698, auc=0.507, est=0.713, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.510, est=0.711, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.518, est=0.712, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.707, f1=0.707, auc=0.513, est=0.717, cfg={'svc__C': 0.001, 'svc__kernel': 'linear', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.713, f1=0.713, auc=0.465, est=0.706, cfg={'svc__C': 1.0, 'svc__kernel': 'poly', 'svc__probability': True, 'svc__random_state': 16} 

Accuracy: 0.707 (0.005) 

F1: 0.707 (0.005) 

AUC: 0.502 (0.019) 



CV with  ran_for  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.688, f1=0.688, auc=0.623, est=0.715, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 250, 'ran_for__random_state': 16} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.698, f1=0.698, auc=0.574, est=0.723, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100, 'ran_for__random_state': 16} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.628, est=0.711, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100, 'ran_for__random_state': 16} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.718, f1=0.718, auc=0.588, est=0.714, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 250, 'ran_for__random_state': 16} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.729, f1=0.729, auc=0.581, est=0.709, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 250, 'ran_for__random_state': 16} 

Accuracy: 0.708 (0.014) 

F1: 0.708 (0.014) 

AUC: 0.599 (0.022) 



CV with  dummy  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.524, f1=0.524, auc=0.500, est=0.590, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.619, f1=0.619, auc=0.500, est=0.566, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.587, f1=0.587, auc=0.500, est=0.574, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.601, f1=0.601, auc=0.500, est=0.571, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.553, f1=0.553, auc=0.500, est=0.583, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.577 (0.034) 

F1: 0.577 (0.034) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.524, f1=0.524, auc=0.570, est=0.577, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'newton-cg'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.608, f1=0.608, auc=0.528, est=0.560, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'newton-cg'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.577, f1=0.577, auc=0.487, est=0.573, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'newton-cg'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.590, f1=0.590, auc=0.522, est=0.571, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'newton-cg'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.548, f1=0.548, auc=0.571, est=0.576, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'newton-cg'} 

Accuracy: 0.569 (0.030) 

F1: 0.569 (0.030) 

AUC: 0.536 (0.032) 



CV with  svc  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.529, f1=0.529, auc=0.444, est=0.592, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.619, f1=0.619, auc=0.524, est=0.568, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.577, f1=0.577, auc=0.481, est=0.574, cfg={'svc__C': 1.0, 'svc__kernel': 'poly', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.596, f1=0.596, auc=0.434, est=0.574, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.553, f1=0.553, auc=0.458, est=0.583, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True, 'svc__random_state': 16} 

Accuracy: 0.575 (0.031) 

F1: 0.575 (0.031) 

AUC: 0.468 (0.032) 



CV with  ran_for  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.524, f1=0.524, auc=0.528, est=0.590, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100, 'ran_for__random_state': 16} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.619, f1=0.619, auc=0.579, est=0.568, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 500, 'ran_for__random_state': 16} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.587, f1=0.587, auc=0.533, est=0.576, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 15, 'ran_for__n_estimators': 100, 'ran_for__random_state': 16} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.601, f1=0.601, auc=0.566, est=0.571, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100, 'ran_for__random_state': 16} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.553, f1=0.553, auc=0.507, est=0.584, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 1000, 'ran_for__random_state': 16} 

Accuracy: 0.577 (0.034) 

F1: 0.577 (0.034) 

AUC: 0.543 (0.026) 



CV with  dummy  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.164, f1=0.164, auc=0.500, est=0.219, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.180, f1=0.180, auc=0.500, est=0.215, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.259, f1=0.259, auc=0.500, est=0.195, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  15
{6}
>acc=0.271, f1=0.271, auc=0.500, est=0.192, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.165, f1=0.165, auc=0.500, est=0.219, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.208 (0.047) 

F1: 0.208 (0.047) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.164, f1=0.164, auc=0.567, est=0.204, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'sag'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.169, f1=0.169, auc=0.378, est=0.214, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'newton-cg'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.265, f1=0.265, auc=0.516, est=0.187, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'sag'} 

y_train unique len:  16
y_test unique len:  15
{6}
>acc=0.261, f1=0.261, auc=0.389, est=0.176, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'sag'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.160, f1=0.160, auc=0.379, est=0.213, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'sag'} 

Accuracy: 0.204 (0.048) 

F1: 0.204 (0.048) 

AUC: 0.446 (0.080) 



CV with  svc  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.164, f1=0.164, auc=0.428, est=0.222, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.180, f1=0.180, auc=0.446, est=0.215, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.259, f1=0.259, auc=0.580, est=0.196, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  16
y_test unique len:  15
{6}
>acc=0.271, f1=0.271, auc=0.535, est=0.192, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.154, f1=0.154, auc=0.444, est=0.220, cfg={'svc__C': 1.0, 'svc__kernel': 'poly', 'svc__probability': True, 'svc__random_state': 16} 

Accuracy: 0.206 (0.049) 

F1: 0.206 (0.049) 

AUC: 0.487 (0.060) 



CV with  ran_for  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.153, f1=0.153, auc=0.541, est=0.229, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 1000, 'ran_for__random_state': 16} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.190, f1=0.190, auc=0.529, est=0.228, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 15, 'ran_for__n_estimators': 250, 'ran_for__random_state': 16} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.286, f1=0.286, auc=0.698, est=0.211, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100, 'ran_for__random_state': 16} 

y_train unique len:  16
y_test unique len:  15
{6}
>acc=0.277, f1=0.277, auc=0.518, est=0.196, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 4, 'ran_for__min_samples_split': 15, 'ran_for__n_estimators': 500, 'ran_for__random_state': 16} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.154, f1=0.154, auc=0.472, est=0.229, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 250, 'ran_for__random_state': 16} 

Accuracy: 0.212 (0.058) 

F1: 0.212 (0.058) 

AUC: 0.552 (0.077) 



CV with  dummy  for  area_10
y_train unique len:  10
y_test unique len:  10
set()
>acc=0.063, f1=0.063, auc=0.500, est=0.129, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.106, f1=0.106, auc=0.500, est=0.111, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.095, f1=0.095, auc=0.500, est=0.130, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.128, f1=0.128, auc=0.500, est=0.094, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.117, f1=0.117, auc=0.500, est=0.105, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.102 (0.022) 

F1: 0.102 (0.022) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  area_10
y_train unique len:  10
y_test unique len:  10
set()
>acc=0.101, f1=0.101, auc=0.547, est=0.127, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'saga'} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.127, f1=0.127, auc=0.461, est=0.121, cfg={'log_reg__C': 0.1, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'saga'} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.138, f1=0.138, auc=0.515, est=0.118, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'saga'} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.176, f1=0.176, auc=0.574, est=0.101, cfg={'log_reg__C': 0.1, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'newton-cg'} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.112, f1=0.112, auc=0.552, est=0.136, cfg={'log_reg__C': 0.1, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__random_state': 16, 'log_reg__solver': 'saga'} 

Accuracy: 0.130 (0.026) 

F1: 0.130 (0.026) 

AUC: 0.530 (0.039) 



CV with  svc  for  area_10
y_train unique len:  10
y_test unique len:  10
set()
>acc=0.063, f1=0.063, auc=0.616, est=0.131, cfg={'svc__C': 0.1, 'svc__kernel': 'rbf', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.122, f1=0.122, auc=0.522, est=0.119, cfg={'svc__C': 0.001, 'svc__kernel': 'linear', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.095, f1=0.095, auc=0.487, est=0.130, cfg={'svc__C': 0.1, 'svc__kernel': 'rbf', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.144, f1=0.144, auc=0.654, est=0.111, cfg={'svc__C': 10, 'svc__kernel': 'sigmoid', 'svc__probability': True, 'svc__random_state': 16} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.122, f1=0.122, auc=0.429, est=0.136, cfg={'svc__C': 100, 'svc__kernel': 'linear', 'svc__probability': True, 'svc__random_state': 16} 

Accuracy: 0.109 (0.028) 

F1: 0.109 (0.028) 

AUC: 0.542 (0.083) 



CV with  ran_for  for  area_10
y_train unique len:  10
y_test unique len:  10
set()
>acc=0.106, f1=0.106, auc=0.598, est=0.146, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 250, 'ran_for__random_state': 16} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.101, f1=0.101, auc=0.616, est=0.131, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 250, 'ran_for__random_state': 16} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.090, f1=0.090, auc=0.489, est=0.134, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 100, 'ran_for__random_state': 16} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.122, f1=0.122, auc=0.559, est=0.118, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 250, 'ran_for__random_state': 16} 

y_train unique len:  10
y_test unique len:  10
set()
>acc=0.117, f1=0.117, auc=0.492, est=0.143, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 100, 'ran_for__random_state': 16} 

Accuracy: 0.107 (0.012) 

F1: 0.107 (0.012) 

AUC: 0.551 (0.053) 

Linux idun-02-01 4.18.0-193.el8.x86_64 #1 SMP Fri May 8 10:59:10 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
