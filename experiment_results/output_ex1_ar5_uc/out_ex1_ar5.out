we are running from this directory: /cluster/home/miriamfi/RankRec
The name of the job is: ex1_ar5
The job ID is 370524
The job was run on these nodes: idun-02-07
Number of nodes: 1
We are using 1 cores
We are using 1 cores per node
Total of 1 cores

Currently Loaded Modules:
  1) GCCcore/9.3.0
  2) zlib/1.2.11-GCCcore-9.3.0                     (H)
  3) binutils/2.34-GCCcore-9.3.0                   (H)
  4) iccifort/2020.1.217
  5) numactl/2.0.13-GCCcore-9.3.0                  (H)
  6) UCX/1.8.0-GCCcore-9.3.0                       (H)
  7) impi/2019.7.217-iccifort-2020.1.217
  8) iimpi/2020a
  9) imkl/2020.1.217-iimpi-2020a
 10) intel/2020a
 11) bzip2/1.0.8-GCCcore-9.3.0                     (H)
 12) ncurses/6.2-GCCcore-9.3.0                     (H)
 13) libreadline/8.0-GCCcore-9.3.0                 (H)
 14) Tcl/8.6.10-GCCcore-9.3.0                      (H)
 15) SQLite/3.31.1-GCCcore-9.3.0                   (H)
 16) XZ/5.2.5-GCCcore-9.3.0                        (H)
 17) GMP/6.2.0-GCCcore-9.3.0                       (H)
 18) libffi/3.3-GCCcore-9.3.0                      (H)
 19) Python/3.8.2-GCCcore-9.3.0
 20) pybind11/2.4.3-GCCcore-9.3.0-Python-3.8.2     (H)
 21) SciPy-bundle/2020.03-intel-2020a-Python-3.8.2
 22) libpng/1.6.37-GCCcore-9.3.0                   (H)
 23) freetype/2.10.1-GCCcore-9.3.0                 (H)
 24) expat/2.2.9-GCCcore-9.3.0                     (H)
 25) util-linux/2.35-GCCcore-9.3.0                 (H)
 26) fontconfig/2.13.92-GCCcore-9.3.0              (H)
 27) xorg-macros/1.19.2-GCCcore-9.3.0              (H)
 28) libpciaccess/0.16-GCCcore-9.3.0               (H)
 29) X11/20200222-GCCcore-9.3.0                    (H)
 30) Tk/8.6.10-GCCcore-9.3.0                       (H)
 31) Tkinter/3.8.2-GCCcore-9.3.0                   (H)
 32) matplotlib/3.2.1-intel-2020a-Python-3.8.2

  Where:
   H:  Hidden Module

 

Program starting... 

User Info Loaded!
Rec train shape:  (943, 1682)
Rec test shape:  (943, 1682)
atr_classes:  {'M': 0, 'F': 1}
atr_classes:  {'M': 0, 'F': 1}
gender
1886
all_attr:  Counter({0: 670, 1: 273})
all_attr unique:  2
train_attr unique:  2
test_attr unique:  2



atr_classes:  {}
atr_classes:  {}
age
1886
all_attr:  Counter({0: 544, 1: 209, 2: 190})
all_attr unique:  3
train_attr unique:  3
test_attr unique:  3



atr_classes:  {'technician/engineer': 0, 'other/none': 1, 'writer': 2, 'executive': 3, 'administrator': 4, 'student': 5, 'lawyer': 6, 'educator': 7, 'scientist': 8, 'entertainment': 9, 'programmer': 10, 'librarian': 11, 'homemaker/retired': 12, 'artist': 13, 'salesman/marketing': 14, 'healthcare/doctor': 15}
atr_classes:  {'technician/engineer': 0, 'other/none': 1, 'writer': 2, 'executive': 3, 'administrator': 4, 'student': 5, 'lawyer': 6, 'educator': 7, 'scientist': 8, 'entertainment': 9, 'programmer': 10, 'librarian': 11, 'homemaker/retired': 12, 'artist': 13, 'salesman/marketing': 14, 'healthcare/doctor': 15}
occupation
1886
all_attr:  Counter({5: 196, 1: 114, 7: 95, 0: 94, 4: 79, 10: 66, 11: 51, 2: 45, 14: 38, 3: 32, 8: 31, 13: 28, 15: 23, 12: 21, 9: 18, 6: 12})
all_attr unique:  16
train_attr unique:  16
test_attr unique:  16



atr_classes:  {}
atr_classes:  {}
area_5
1886
all_attr:  Counter({1: 258, 0: 209, 4: 183, 3: 180, 2: 76, 5: 37})
all_attr unique:  6
train_attr unique:  6
test_attr unique:  6





CV with  dummy  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.698, f1=0.698, auc=0.500, est=0.713, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.500, est=0.711, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.500, est=0.711, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.707, f1=0.707, auc=0.500, est=0.711, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.729, f1=0.729, auc=0.500, est=0.706, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.711 (0.010) 

F1: 0.711 (0.010) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.693, f1=0.693, auc=0.538, est=0.710, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.714, f1=0.714, auc=0.508, est=0.710, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.589, est=0.714, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.702, f1=0.702, auc=0.507, est=0.717, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.713, f1=0.713, auc=0.477, est=0.707, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

Accuracy: 0.706 (0.008) 

F1: 0.706 (0.008) 

AUC: 0.524 (0.038) 



CV with  svc  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.698, f1=0.698, auc=0.505, est=0.713, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.527, est=0.711, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.720, f1=0.720, auc=0.506, est=0.712, cfg={'svc__C': 1.0, 'svc__kernel': 'poly', 'svc__probability': True} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.697, f1=0.697, auc=0.478, est=0.715, cfg={'svc__C': 1.0, 'svc__kernel': 'sigmoid', 'svc__probability': True} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.718, f1=0.718, auc=0.452, est=0.709, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True} 

Accuracy: 0.708 (0.010) 

F1: 0.708 (0.010) 

AUC: 0.494 (0.026) 



CV with  ran_for  for  gender
y_train unique len:  2
y_test unique len:  2
set()
>acc=0.698, f1=0.698, auc=0.575, est=0.713, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.704, f1=0.704, auc=0.609, est=0.720, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 250} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.709, f1=0.709, auc=0.584, est=0.712, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.707, f1=0.707, auc=0.534, est=0.711, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100} 

y_train unique len:  2
y_test unique len:  2
set()
>acc=0.734, f1=0.734, auc=0.575, est=0.710, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 100} 

Accuracy: 0.711 (0.012) 

F1: 0.711 (0.012) 

AUC: 0.575 (0.024) 



CV with  dummy  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.524, f1=0.524, auc=0.500, est=0.590, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.619, f1=0.619, auc=0.500, est=0.566, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.587, f1=0.587, auc=0.500, est=0.574, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.601, f1=0.601, auc=0.500, est=0.571, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.553, f1=0.553, auc=0.500, est=0.583, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.577 (0.034) 

F1: 0.577 (0.034) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.524, f1=0.524, auc=0.565, est=0.578, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.608, f1=0.608, auc=0.531, est=0.558, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.577, f1=0.577, auc=0.485, est=0.573, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.590, f1=0.590, auc=0.523, est=0.571, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.559, f1=0.559, auc=0.560, est=0.576, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

Accuracy: 0.572 (0.029) 

F1: 0.572 (0.029) 

AUC: 0.533 (0.029) 



CV with  svc  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.524, f1=0.524, auc=0.432, est=0.590, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.614, f1=0.614, auc=0.437, est=0.566, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.587, f1=0.587, auc=0.422, est=0.574, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.590, f1=0.590, auc=0.410, est=0.572, cfg={'svc__C': 1.0, 'svc__kernel': 'poly', 'svc__probability': True} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.553, f1=0.553, auc=0.451, est=0.583, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True} 

Accuracy: 0.574 (0.032) 

F1: 0.574 (0.032) 

AUC: 0.430 (0.014) 



CV with  ran_for  for  age
y_train unique len:  3
y_test unique len:  3
set()
>acc=0.529, f1=0.529, auc=0.566, est=0.594, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 250} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.624, f1=0.624, auc=0.627, est=0.568, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 2, 'ran_for__n_estimators': 500} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.582, f1=0.582, auc=0.582, est=0.580, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 250} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.596, f1=0.596, auc=0.615, est=0.576, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 500} 

y_train unique len:  3
y_test unique len:  3
set()
>acc=0.553, f1=0.553, auc=0.586, est=0.584, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 4, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 100} 

Accuracy: 0.577 (0.033) 

F1: 0.577 (0.033) 

AUC: 0.595 (0.023) 



CV with  dummy  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.164, f1=0.164, auc=0.500, est=0.219, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.180, f1=0.180, auc=0.500, est=0.215, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.259, f1=0.259, auc=0.500, est=0.195, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  15
{6}
>acc=0.271, f1=0.271, auc=0.500, est=0.192, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.165, f1=0.165, auc=0.500, est=0.219, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.208 (0.047) 

F1: 0.208 (0.047) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.169, f1=0.169, auc=0.550, est=0.210, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.169, f1=0.169, auc=0.379, est=0.214, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.254, f1=0.254, auc=0.491, est=0.187, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

y_train unique len:  16
y_test unique len:  15
{6}
>acc=0.239, f1=0.239, auc=0.375, est=0.180, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.149, f1=0.149, auc=0.372, est=0.213, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'sag'} 

Accuracy: 0.196 (0.042) 

F1: 0.196 (0.042) 

AUC: 0.433 (0.073) 



CV with  svc  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.164, f1=0.164, auc=0.404, est=0.220, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.180, f1=0.180, auc=0.577, est=0.215, cfg={'svc__C': 1.0, 'svc__kernel': 'poly', 'svc__probability': True} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.254, f1=0.254, auc=0.445, est=0.196, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  16
y_test unique len:  15
{6}
>acc=0.271, f1=0.271, auc=0.539, est=0.193, cfg={'svc__C': 1.0, 'svc__kernel': 'poly', 'svc__probability': True} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.165, f1=0.165, auc=0.498, est=0.220, cfg={'svc__C': 1.0, 'svc__kernel': 'rbf', 'svc__probability': True} 

Accuracy: 0.207 (0.046) 

F1: 0.207 (0.046) 

AUC: 0.493 (0.062) 



CV with  ran_for  for  occupation
y_train unique len:  16
y_test unique len:  16
set()
>acc=0.175, f1=0.175, auc=0.504, est=0.228, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 500} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.190, f1=0.190, auc=0.429, est=0.227, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 4, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 100} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.265, f1=0.265, auc=0.459, est=0.225, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 4, 'ran_for__min_samples_split': 15, 'ran_for__n_estimators': 100} 

y_train unique len:  16
y_test unique len:  15
{6}
>acc=0.261, f1=0.261, auc=0.455, est=0.203, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 4, 'ran_for__min_samples_split': 15, 'ran_for__n_estimators': 100} 

y_train unique len:  16
y_test unique len:  16
set()
>acc=0.191, f1=0.191, auc=0.380, est=0.229, cfg={'ran_for__max_features': 20, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 1000} 

Accuracy: 0.216 (0.038) 

F1: 0.216 (0.038) 

AUC: 0.445 (0.041) 



CV with  dummy  for  area_5
y_train unique len:  6
y_test unique len:  6
set()
>acc=0.280, f1=0.280, auc=0.500, est=0.272, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.307, f1=0.307, auc=0.500, est=0.265, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.302, f1=0.302, auc=0.500, est=0.267, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.250, f1=0.250, auc=0.500, est=0.279, cfg={'dummy__strategy': 'most_frequent'} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.229, f1=0.229, auc=0.500, est=0.285, cfg={'dummy__strategy': 'most_frequent'} 

Accuracy: 0.274 (0.030) 

F1: 0.274 (0.030) 

AUC: 0.500 (0.000) 



CV with  log_reg  for  area_5
y_train unique len:  6
y_test unique len:  6
set()
>acc=0.270, f1=0.270, auc=0.503, est=0.251, cfg={'log_reg__C': 0.01, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.286, f1=0.286, auc=0.580, est=0.252, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'saga'} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.212, f1=0.212, auc=0.411, est=0.255, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.250, f1=0.250, auc=0.449, est=0.257, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.229, f1=0.229, auc=0.511, est=0.240, cfg={'log_reg__C': 0.001, 'log_reg__max_iter': 10000, 'log_reg__penalty': 'l2', 'log_reg__solver': 'newton-cg'} 

Accuracy: 0.249 (0.027) 

F1: 0.249 (0.027) 

AUC: 0.491 (0.058) 



CV with  svc  for  area_5
y_train unique len:  6
y_test unique len:  6
set()
>acc=0.280, f1=0.280, auc=0.496, est=0.272, cfg={'svc__C': 0.1, 'svc__kernel': 'rbf', 'svc__probability': True} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.302, f1=0.302, auc=0.438, est=0.267, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.302, f1=0.302, auc=0.585, est=0.267, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.250, f1=0.250, auc=0.541, est=0.281, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.223, f1=0.223, auc=0.516, est=0.285, cfg={'svc__C': 0.1, 'svc__kernel': 'poly', 'svc__probability': True} 

Accuracy: 0.271 (0.031) 

F1: 0.271 (0.031) 

AUC: 0.515 (0.049) 



CV with  ran_for  for  area_5
y_train unique len:  6
y_test unique len:  6
set()
>acc=0.307, f1=0.307, auc=0.560, est=0.281, cfg={'ran_for__max_features': 15, 'ran_for__min_samples_leaf': 2, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 250} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.333, f1=0.333, auc=0.557, est=0.271, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 4, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 250} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.280, f1=0.280, auc=0.457, est=0.297, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 4, 'ran_for__min_samples_split': 15, 'ran_for__n_estimators': 500} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.277, f1=0.277, auc=0.603, est=0.293, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 4, 'ran_for__min_samples_split': 20, 'ran_for__n_estimators': 1500} 

y_train unique len:  6
y_test unique len:  6
set()
>acc=0.245, f1=0.245, auc=0.582, est=0.287, cfg={'ran_for__max_features': 10, 'ran_for__min_samples_leaf': 1, 'ran_for__min_samples_split': 10, 'ran_for__n_estimators': 100} 

Accuracy: 0.288 (0.030) 

F1: 0.288 (0.030) 

AUC: 0.552 (0.050) 

Linux idun-02-07 4.18.0-193.el8.x86_64 #1 SMP Fri May 8 10:59:10 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
